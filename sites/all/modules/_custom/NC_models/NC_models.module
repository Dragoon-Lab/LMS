<?php
	function loadNCModels($user_det, $action){
		//prepare content as json
		//preparing private content
		//private content consists of folders which are unshared and models which are private
		//unshared folders exist in lms db, we need to pull out these folders
		//private unshared folders
		$user_name = $user_det['uname'];
		$user_id = $user_det['uid'];
		$query = db_select('folders','f');
		$query->fields('f',array('folder_id','folder_name'));
		$query->condition('uid',$user_id);
		$query->condition('current_status',0);
		$result = $query->execute();
		$string = array();
		while($res=$result->fetchAssoc()){
			$group = $res['folder_id'];
			$grp_name = $res['folder_name'];
			//make a request to the dragoon server to list problems where group = sh_name+"-"+owner_name
			$ret = sendGroup($group);
			$ret = json_decode($ret);
			foreach($ret as $temp)
			$string["private"][$grp_name][$temp]=$temp;
		}

		//original private problems 
		$priv_group = $user_name."-private";
		$ret  = sendGroup($priv_group);
		$ret = json_decode($ret);
		foreach($ret as $temp){
			$string["private"][$temp] = $temp;
		}

		//shared folders (created by someone else and shared to the current user)
		$shared_q = db_select('shared_members','sh');
		$shared_q->fields('sh',array('folder_num'));
		$shared_q->condition('uid',$user_id);
		$sh_q_res = $shared_q->execute();
		$local_shared_store = "";
		while($res_sh = $sh_q_res->fetchAssoc()){

			//we retreive folder id from the folders table using folder_num
			$fol_num = $res_sh['folder_num'];
			$get_fol_id = db_select('folders','f');
			$get_fol_id->fields('f',array('folder_id'));
			$get_fol_id->condition('folder_num',$fol_num);
			$get_fol_id_res = $get_fol_id->execute();
			$fol_id = $get_fol_id_res->fetchAssoc();
			$folder_id = $fol_id['folder_id'];
			
			$sh_grp = explode("-",$folder_id);
			$sh_grp_name = $sh_grp[0];
			$ret = sendGroup($folder_id);
			$ret = json_decode($ret);
			foreach($ret as $temp){
				$string["shared"][$sh_grp_name . " by " . $sh_grp[1]][$temp] = $temp;
				$local_shared_store = $local_shared_store.$sh_grp_name . " by " . $sh_grp[1]."=".$sh_grp_name."-".$sh_grp[1]."&";
			}
		}

		//owned folders(which are shared)
		$query2 = db_select('folders','f');
		$query2->fields('f',array('folder_id','folder_name'));
		$query2->condition('uid',$user_id);
		$query2->condition('current_status',1);
		$result2 = $query2->execute();
		while($res2=$result2->fetchAssoc()){
			$group2 = $res2['folder_id'];
			$grp_name2 = $res2['folder_name'];
			//make a request to the dragoon server to list problems where group = sh_name+"-"+owner_name
			$ret2 = sendGroup($group2);
			$ret2 = json_decode($ret2);
			foreach($ret2 as $temp2){
				$string["shared"][$grp_name2][$temp2]=$temp2;
				$local_shared_store = $local_shared_store.$grp_name2."=".$grp_name2."-".$user_name."&";
			}
		}
		//print_r($string);
		echo '<input type = "hidden" id = "local_shared_store" value = "'.$local_shared_store.'"\>';
		return json_encode($string);
	}

	function sendGroup($g){
		$url = get_path();
		$url = $url['url'].'/global.php';
		//since this function returns models and LMS has provided users choice in ordering the models
		global $user;
		$user_id = $user->uid;
		$mul_cond = db_and()->condition('up_name','list_model_order')->condition('uid',$user_id);
		$sort_q = db_select('lms_user_preferences','up')
					->fields('up', array('up_value'))
					->condition($mul_cond)->execute();
		$sort_res = $sort_q->fetchAssoc();
		$sort = '0';
		if($sort_res['up_value'] == "alphabetic")
			$sort = '1';

		$data = array('t' => 'reqNonClassProblems', 'g' => $g, 's' => $sort);
		$options = array(
			'http' => array(
				'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
				'method'  => 'POST',
				'content' => http_build_query($data)
			)
		);
		$context  = stream_context_create($options);
		$result = file_get_contents($url, false, $context);
		if ($result === FALSE) { /* Handle error */
			echo "something failed";
		}
		return $result;

	}

	function createCommonBlocks($dataTree){

		$common_blocks='<div id="confirmDeleteModal" class="modal fade" role="dialog">
								<div class="modal-dialog">
								<!-- Modal content-->
									<div class="modal-content">
										<div class="modal-header">
											<button type="button" class="close" data-dismiss="modal">&times;</button>
												<h4 class="modal-title">Confirm Delete</h4>
											</div>
										<div class="modal-body">
											<p>Are you sure you want to delete?</p>
										</div>
										<div class="modal-footer">
											<button type="button" class="btn btn-default" data-dismiss="modal" id="deleteConfirm">Yes! Delete</button>
											<button type="button" class="btn btn-default" data-dismiss="modal" data-toggle="modal" href="#deleteFolderModal">Cancel</button>
										</div>
									</div>
								</div>
							</div>
							<div id="confirmRemoveShare" class="modal fade" role="dialog">
								<div class="modal-dialog">
								<!-- Modal content-->
									<div class="modal-content">
										<div class="modal-header">
											<button type="button" class="close" data-dismiss="modal">&times;</button>
												<h4 class="modal-title">Confirm Delete</h4>
											</div>
										<div class="modal-body">
											<p>Are you sure you want to delete?</p>
										</div>
										<div class="modal-footer">
											<button type="button" class="btn btn-default" data-dismiss="modal" id="removeShareConfirmed">Yes! Delete</button>
											<button type="button" class="btn btn-default" data-dismiss="modal" data-toggle="modal">Cancel</button>
										</div>
									</div>
								</div>
							</div>
							<div id="confirmModelCopy" class="modal fade" role="dialog">
								<div class="modal-dialog">
								<!-- Modal content-->
									<div class="modal-content">
										<div class="modal-header">
											<button type="button" class="close" data-dismiss="modal">&times;</button>
												<h4 class="modal-title">Confirm Copy/Move</h4>
											</div>
										<div class="modal-body">
											<p>Are you sure you want to copy/move?</p>
										</div>
										<div class="modal-footer">
											<button type="button" class="btn btn-default" data-dismiss="modal" id="copyModelConfirmed">Yes</button>
											<button type="button" class="btn btn-default" data-dismiss="modal" data-toggle="modal">Cancel</button>
										</div>
									</div>
								</div>
							</div> 
							<div id="alertDisabledSharing" class="modal fade" role="dialog">
								<div class="modal-dialog">
								<!-- Modal content-->
									<div class="modal-content">
										<div class="modal-header">
											<button type="button" class="close" data-dismiss="modal">&times;</button>
												<h4 class="modal-title">Confirm Copy/Move</h4>
											</div>
										<div class="modal-body">
											<p>Sorry, that folder is no longer shared with you.</p>
										</div>
										<div class="modal-footer">
											<button type="button" class="btn btn-default" data-dismiss="modal" id="">Ok</button>
										</div>
									</div>
								</div>
							</div>	
							<div class="modal fade" id="loadMe" tabindex="-1" role="dialog" aria-labelledby="loadMeLabel">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-body text-center">
        <div class="loader"></div>
        <div clas="loader-txt">
          <p>Please wait while we rename your folder <br><br><small>Thanks for your patience</small></p>
        </div>
      </div>
    </div>
  </div>
</div>						
							';
		return $common_blocks;
	}

	function loadUserFolders($user_det)
	{
		//prepare all user folders which the user owns
		// return an array
		$user_id = $user_det['uid'];
		$user_name = $user_det['uname'];
		$query=db_select('folders','f');
		$query->fields('f',array('folder_id','folder_name'));
		$query->condition('uid',$user_id);
		$q_res = $query->execute();
		//create an array with default first element as user private folder with id
		$user_folders = array();
		$user_folders[$user_name . "-private"] = 'My "Private" Folder';
		while ($res = $q_res->fetchAssoc()) {
			$group = $res['folder_id'];
			$grp_name = $res['folder_name'];
			$user_folders[$group] = $grp_name;
		}
		return $user_folders;
	}

	function loadUserFolders2($user_det)
	{
		//prepare all user folders which the user owns
		// return an array
		$user_id = $user_det['uid'];
		$user_name = $user_det['uname'];
		$query=db_select('folders','f');
		$query->fields('f',array('folder_id','folder_name'));
		$query->condition('uid',$user_id);
		$q_res = $query->execute();
		//create an array with default first element as user private folder with id
		$user_folders = array();
		$user_folders[$user_name . "-private"] = 'My "Private" Folder';
		while ($res = $q_res->fetchAssoc()) {
			$group = $res['folder_id'];
			$grp_name = $res['folder_name'];
			$user_folders[$group] = $grp_name;
		}
		$query2 = db_select('shared_members','sh');
		$query2->fields('sh',array('folder_num'));
		$query2->condition('uid',$user_id);
		$q_res2 = $query2->execute();
		while($res2 = $q_res2->fetchAssoc()){
			$fol_num = $res2['folder_num'];
			$get_fol_id = db_select('folders','f');
			$get_fol_id->fields('f',array('folder_id'));
			$get_fol_id->condition('folder_num',$fol_num);
			$get_fol_id_res = $get_fol_id->execute();
			$fol_id = $get_fol_id_res->fetchAssoc();
			$folder_id = $fol_id['folder_id'];
			$group2 = $folder_id;
			if(!isset($user_folders[$group2])){
				$folder_ar = explode("-",$group2);
				$folder_name = $folder_ar[0];
				$user_folders[$group2] = $folder_name. " by " . $folder_ar[1];
			}
		}
		return $user_folders;
	}

	function loadShareHolders($folder_name,$owner){

		//returns current folder shared users
		$folder_id = $folder_name."-".$owner;
		$fol_num_q = db_select('folders','f');
		$fol_num_q->fields('f', array('folder_num'));
		$fol_num_q->condition('folder_id',$folder_id);
		$fol_num_res = $fol_num_q->execute();
		$fol_num_ar = $fol_num_res->fetchAssoc();
		$folder_num = $fol_num_ar['folder_num'];
		$query = db_select('shared_members','sh')
			->fields('sh',array('uid'))
			->condition('folder_num',$folder_num)
			->execute();
		$shared_holders = '';
		while($res = $query->fetchAssoc()){
			$user = db_select('users','u')
				->fields('u',array('mail','name'))
				->condition('uid',$res['uid'])
				->execute();
			$username = $user->fetchAssoc();
			$element = "
					<tr class='eachSharedHolder'>
					<td><div class='sharedUserContent'><span>".$username['name']."</span><br><span class='sharedHolderEmail'>".$username['mail']."</span></div></td>
					<td><i class='glyphicon glyphicon-remove glyphShare' title='Unshare User' data-toggle='modal'></td>
					</tr>";
			$shared_holders = $shared_holders.$element;
		}
		return $shared_holders;
	}




